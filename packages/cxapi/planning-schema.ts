/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/tenants/{tenant_id}/agents": {
    /**
     * Retrieve agents.
     *
     * Returns all agents for the provided tenant.
     */
    get: operations["get_agents_tenants_tenant_id_agents"];
  };
  "/tenants/{tenant_id}/agents/{agent_id}": {
    /** Retrieve a single agent. */
    get: operations["get_agent_tenants_tenant_id_agents_agent_id"];
  };
  "/tenants/{tenant_id}/agents/{agent_id}/address": {
    /** Retrieve an agent's address. */
    get: operations["get_address_tenants_tenant_id_agents_agent_id_address"];
    /** Add or update an agent's address. */
    put: operations["put_address_tenants_tenant_id_agents_agent_id_address"];
    /** Delete an agent's address. */
    delete: operations["delete_address_tenants_tenant_id_agents_agent_id_address"];
  };
  "/tenants/{tenant_id}/agents/{agent_id}/employment": {
    /** Retrieve an agent's employment. */
    get: operations["get_employment_tenants_tenant_id_agents_agent_id_employment"];
    /** Add or update an agent's employment. */
    put: operations["put_employment_tenants_tenant_id_agents_agent_id_employment"];
    /** Delete an agent's employment. */
    delete: operations["delete_employment_tenants_tenant_id_agents_agent_id_employment"];
  };
  "/tenants/{tenant_id}/agents/{agent_id}/availability": {
    /** Retrieve all availability patterns assigned to an agent. */
    get: operations["get_all_availabilities_tenants_tenant_id_agents_agent_id_availability"];
    /**
     * Assign an availability pattern to an agent.
     *
     * Adds a new assignment of a availability pattern to an agent. Multiple
     * patterns can be added per agent as long as the date-range
     * when for which it is assigned do not overlap. Treated as a closed interval.
     */
    post: operations["post_availability_tenants_tenant_id_agents_agent_id_availability"];
  };
  "/tenants/{tenant_id}/agents/{agent_id}/availability/{id}": {
    /** Retrieve a specific assignment of an availability pattern to an agent. */
    get: operations["get_availability_tenants_tenant_id_agents_agent_id_availability_id"];
    /** Remove an assigned availability pattern for an agent. */
    delete: operations["delete_availability_tenants_tenant_id_agents_agent_id_availability_id"];
  };
  "/tenants/{tenant_id}/agents/{agent_id}/restrictions": {
    /** Get all restriction sets assigned to an agent. */
    get: operations["get_assigned_restriction_sets_tenants_tenant_id_agents_agent_id_restrictions"];
    /**
     * Assign a restriction set to an agent.
     *
     * A restriction set can only be added if it does not overlap
     * in time with an existing restriction set.
     */
    post: operations["post_assigned_restriction_set_tenants_tenant_id_agents_agent_id_restrictions"];
  };
  "/tenants/{tenant_id}/agents/{agent_id}/restrictions/{assigned_restriction_set_id}": {
    /** Retrieve a single assigned restriction set. */
    get: operations["get_assigned_restriction_set_tenants_tenant_id_agents_agent_id_restrictions_assigned_restriction_set_id"];
    /** Remove an assigned restriction set. */
    delete: operations["delete_assigned_restriction_set_tenants_tenant_id_agents_agent_id_restrictions_assigned_restriction_set_id"];
    /** Update a single assigned restriction set. */
    patch: operations["patch_assigned_restriction_set_tenants_tenant_id_agents_agent_id_restrictions_assigned_restriction_set_id"];
  };
  "/tenants/{tenant_id}/agents/{agent_id}/competencies": {
    /** Get all competencies associated with an agent. */
    get: operations["get_competencies_tenants_tenant_id_agents_agent_id_competencies"];
  };
  "/tenants/{tenant_id}/availabilitypatterns": {
    /** Retrieve all availabilities of one tenant. */
    get: operations["get_all_tenants_tenant_id_availabilitypatterns"];
  };
  "/tenants/{tenant_id}/availabilitypatterns/{availability_id}": {
    /** Retrieve a single availability. */
    get: operations["get_tenants_tenant_id_availabilitypatterns_availability_id"];
  };
  "/tenants/{tenant_id}/availabilitypatterns/{availability_pattern_id}": {
    /** Update an availability pattern. */
    put: operations["put_tenants_tenant_id_availabilitypatterns_availability_pattern_id"];
    /** Delete an availability pattern. */
    delete: operations["delete_tenants_tenant_id_availabilitypatterns_availability_pattern_id"];
  };
  "/tenants/{tenant_id}/plans": {
    /** Retrieve a all plans in a tenant. */
    get: operations["get_all_tenants_tenant_id_plans"];
    /** Add a new plan. */
    post: operations["post_tenants_tenant_id_plans"];
  };
  "/tenants/{tenant_id}/plans/{plan_id}": {
    /** Retrieve a single plan. */
    get: operations["get_tenants_tenant_id_plans_plan_id"];
    /** Delete a plan. */
    delete: operations["delete_tenants_tenant_id_plans_plan_id"];
    /** Update a plan. */
    patch: operations["patch_tenants_tenant_id_plans_plan_id"];
  };
  "/tenants/{tenant_id}/activities": {
    /** Retrieve all activities. */
    get: operations["get_all_tenants_tenant_id_activities"];
    /** Create a new activity type. */
    post: operations["post_tenants_tenant_id_activities"];
  };
  "/tenants/{tenant_id}/activities/{activity_id}": {
    /** Get a single activity. */
    get: operations["get_tenants_tenant_id_activities_activity_id"];
    /** Update a single activity. */
    patch: operations["patch_tenants_tenant_id_activities_activity_id"];
  };
  "/tenants/{tenant_id}/plans/{plan_id}/schedules/query": {
    /**
     * Query for schedules.
     *
     * Returns all schedules that covers the period that is provided in the query
     * (if any).
     */
    post: operations["query_tenants_tenant_id_plans_plan_id_schedules_query"];
  };
  "/tenants/{tenant_id}/plans/{plan_id}/schedules/copy": {
    /**
     * Copy schedules from other plan.
     *
     * Copies the provided schedules from the source plan to this plan (target).
     * Agents that have schedules in the target plan will have those overwritten
     * unless the schedules are marked as locked. Schedules can only be copied
     * from within the same schedule period.
     */
    post: operations["copy_tenants_tenant_id_plans_plan_id_schedules_copy"];
  };
  "/tenants/{tenant_id}/plans/{plan_id}/schedules": {
    /** Retrieve all schedules for a plan. */
    get: operations["get_all_tenants_tenant_id_plans_plan_id_schedules"];
    /** Add a new set of schedules. */
    post: operations["post_tenants_tenant_id_plans_plan_id_schedules"];
  };
  "/tenants/{tenant_id}/plans/{plan_id}/schedules/{schedule_id}": {
    /** Retrieve a single schedule. */
    get: operations["get_tenants_tenant_id_plans_plan_id_schedules_schedule_id"];
    /** Soft delete a schedule. */
    delete: operations["delete_tenants_tenant_id_plans_plan_id_schedules_schedule_id"];
    /** Update a single schedule. */
    patch: operations["patch_tenants_tenant_id_plans_plan_id_schedules_schedule_id"];
  };
  "/tenants/{tenant_id}/plans/{plan_id}/schedules/{schedule_id}/shifts": {
    /** Retrieve all shifts for a schedule. */
    get: operations["get_all_tenants_tenant_id_plans_plan_id_schedules_schedule_id_shifts"];
    /** Add a new set of shifts to a schedule. */
    post: operations["post_tenants_tenant_id_plans_plan_id_schedules_schedule_id_shifts"];
  };
  "/tenants/{tenant_id}/plans/{plan_id}/schedules/{schedule_id}/shifts/{shift_id}": {
    /** Retrieve a single shift. */
    get: operations["get_tenants_tenant_id_plans_plan_id_schedules_schedule_id_shifts_shift_id"];
    /** Soft delete a shift. */
    delete: operations["delete_tenants_tenant_id_plans_plan_id_schedules_schedule_id_shifts_shift_id"];
    /** Update a single shift. */
    patch: operations["patch_tenants_tenant_id_plans_plan_id_schedules_schedule_id_shifts_shift_id"];
  };
  "/tenants/{tenant_id}/breaksettings": {
    /** Retrieve all break settings for a tenant. */
    get: operations["get_all_tenants_tenant_id_breaksettings"];
    /** Add a new break setting to a tenant. */
    post: operations["post_tenants_tenant_id_breaksettings"];
  };
  "/tenants/{tenant_id}/breaksettings/{breaksetting_id}": {
    /** Retrieve a single break setting. */
    get: operations["get_tenants_tenant_id_breaksettings_breaksetting_id"];
    /** Delete a single break setting. */
    delete: operations["delete_tenants_tenant_id_breaksettings_breaksetting_id"];
    /** Update single breaksetting. */
    patch: operations["patch_tenants_tenant_id_breaksettings_breaksetting_id"];
  };
  "/status": {
    /** Handle healthcheck. */
    get: operations["get_status_status"];
  };
  "/tenants/{tenant_id}/restrictionsets": {
    /** Retrieve all Restriction sets. */
    get: operations["get_all_tenants_tenant_id_restrictionsets"];
    /** Add a new restriction set. */
    post: operations["post_tenants_tenant_id_restrictionsets"];
  };
  "/tenants/{tenant_id}/restrictionsets/{restriction_set_id}": {
    /** Retrieve a single restriction set. */
    get: operations["get_tenants_tenant_id_restrictionsets_restriction_set_id"];
    /** Delete a single restriction set. */
    delete: operations["delete_tenants_tenant_id_restrictionsets_restriction_set_id"];
    /** Update a single restriction set. */
    patch: operations["patch_tenants_tenant_id_restrictionsets_restriction_set_id"];
  };
  "/tenants/{tenant_id}/scheduleperiods": {
    /** Retrieve all schedule periods. */
    get: operations["get_all_tenants_tenant_id_scheduleperiods"];
    /** Add a new schedule period. */
    post: operations["post_tenants_tenant_id_scheduleperiods"];
  };
  "/tenants/{tenant_id}/scheduleperiods/{id}": {
    /** Retrieve a single schedule period. */
    get: operations["get_tenants_tenant_id_scheduleperiods_id"];
    /** Delete a single schedule period. */
    delete: operations["delete_tenants_tenant_id_scheduleperiods_id"];
    /** Update an existing schedule period. */
    patch: operations["patch_tenants_tenant_id_scheduleperiods_id"];
  };
  "/tenants/{tenant_id}/plans/{plan_id}/optimization": {
    /** Get the current optimization. */
    get: operations["get_optimization_tenants_tenant_id_plans_plan_id_optimization"];
    /** Start the current optimization. */
    put: operations["put_optimization_tenants_tenant_id_plans_plan_id_optimization"];
    /**
     * Cancel the current optimization.
     *
     * Deleting an optimization will not remove the entity itself or the resulting
     * schedules. The optimization run will continue to run to end but the result
     * will not be used in the schedules.
     */
    delete: operations["delete_optimization_tenants_tenant_id_plans_plan_id_optimization"];
  };
  "/tenants/{tenant_id}/competencies": {
    /** Retrieve all competencies for a tenant. */
    get: operations["get_all_competencies_tenants_tenant_id_competencies"];
  };
  "/tenants/{tenant_id}/competencies/{competency_id}/agents": {
    /** Retrieve all agents associated with a competency. */
    get: operations["get_agents_tenants_tenant_id_competencies_competency_id_agents"];
  };
  "/tenants/{tenant_id}/plans/{plan_id}/simulation": {
    /** Route to create a simulation. */
    post: operations["post_simulation_tenants_tenant_id_plans_plan_id_simulation"];
  };
  "/changelog.md": {
    get: operations["_get_changelog_changelog.md"];
  };
}

export interface components {
  schemas: {
    /** An enumeration. */
    ActivityCategory:
      | "work"
      | "operator_work"
      | "break"
      | "absence"
      | "vacation";
    /** Represent the DTO-model for an activity. */
    ActivityDTO: {
      id?: string;
      name: string;
      paid: boolean;
      category: components["schemas"]["ActivityCategory"];
      disabled?: boolean;
    } & { [key: string]: any };
    /** Represents the DTO-model for patching an activity. */
    ActivityPatchDTO: {
      id?: string;
      name?: string;
      paid?: boolean;
      category?: components["schemas"]["ActivityCategory"];
      disabled?: boolean;
    } & { [key: string]: any };
    /** DTO representing an agent's address. */
    AddressDTO: {
      addressLine1?: string;
      addressLine2?: string;
      addressLine3?: string;
      city?: string;
      postCode?: string;
      country?: string;
      phone?: string;
    } & { [key: string]: any };
    /** Links an agent to an availability. */
    AgentAvailabilityPatternDTO: {
      availabilityPatternId: string;
      startDate?: string;
      endDate?: string;
    } & { [key: string]: any };
    /** Contain data for how many agents are above or below the limit. */
    AgentOccupancyLimit: {
      limit: number;
      numberOfAgents: number[];
    } & { [key: string]: any };
    /** Simulation result for one agent. */
    AgentResult: {
      id: string;
      occupancy: number[];
    } & { [key: string]: any };
    /** Assigned restriction set dto for responses. */
    AssignedRestrictionSetDTO: {
      startDate: string;
      endDate: string;
      restrictionSetId: string;
      id: string;
    } & { [key: string]: any };
    /** Assigned restriction set dto for updates. */
    AssignedRestrictionSetPatchDTO: {
      startDate?: string;
      endDate?: string;
      restrictionSetId?: string;
    } & { [key: string]: any };
    /** Represents DTO-model for availabiliy elements. */
    AvailabilityElementDTO: {
      /** Allowed values are 'available' or 'unavailable' */
      intervalType: string;
      dayNumber: number;
      weekNumber?: number;
      startTime?: string;
      endTime?: string;
    } & { [key: string]: any };
    /** Represents DTO model for an AvailabilityPattern. */
    AvailabilityPatternDTO: {
      name: string;
      elements: components["schemas"]["AvailabilityElementDTO"][];
    } & { [key: string]: any };
    /** Represents the DTO-model for a break. */
    BreakDTO: {
      paid: boolean;
      length: number;
      intervalStart: number;
      intervalEnd: number;
    } & { [key: string]: any };
    /** Represents the DTO-model for a break settings. */
    BreakSettingsDTO: {
      id?: string;
      shiftLengthMin: number;
      shiftLengthMax: number;
      shiftStartMin: string;
      shiftStartMax: string;
      timeBetweenBreaksMin: number;
      dayTypes: number[];
      breaks: components["schemas"]["BreakDTO"][];
    } & { [key: string]: any };
    /** DTO-model for breaksettings updates. */
    BreakSettingsUpdateDTO: {
      shiftLengthMin?: number;
      shiftLengthMax?: number;
      shiftStartMin?: string;
      shiftStartMax?: string;
      timeBetweenBreaksMin?: number;
      dayTypes?: number[];
      breaks?: components["schemas"]["BreakDTO"][];
    } & { [key: string]: any };
    /** Interaction types supported by CxEngage. */
    ChannelType: "voice" | "messaging" | "sms" | "email" | "work-item";
    /** A DTO model used to return the dto object. */
    CompetencyDTO: {
      id?: string;
      name: string;
      type: components["schemas"]["CompetencyType"];
      active: boolean;
    } & { [key: string]: any };
    /**
     * Simulation result for one competency and channel type.
     *
     * The competency is queue based.
     */
    CompetencyResult: {
      id: string;
      channelType: components["schemas"]["ChannelType"];
      backlog: number;
      handledWithinSla: number[];
      handled: number[];
      abandons: number[];
    } & { [key: string]: any };
    /** Type of competency. */
    CompetencyType: "manual" | "queue";
    /** DTO for employment. */
    EmploymentDTO: {
      start?: string;
      end?: string;
      hourlySalary?: number;
      timezone?: string;
    } & { [key: string]: any };
    HTTPValidationError: {
      detail?: components["schemas"]["ValidationError"][];
    } & { [key: string]: any };
    /** Status for jobs. */
    JobStatus: "pending" | "running" | "success" | "failed";
    /** Assigned restriction set dto for requests. */
    NewAssignedRestrictionSetDTO: {
      startDate: string;
      endDate: string;
      restrictionSetId: string;
    } & { [key: string]: any };
    /** Class used to create a new optimization. */
    NewOptimizationDTO: {
      schedulePeriodId: string;
      agents: string[];
      competencies: string[];
    } & { [key: string]: any };
    /** Restriction set dto for requests. */
    NewRestrictionSetDTO: {
      name: string;
      description: string;
      default: boolean;
      agreedWeeklyHours: number;
      minHoursWeek: number;
      maxHoursWeek: number;
      agreedDaysPerWeek: number;
      minDaysPerWeek: number;
      maxDaysPerWeek: number;
      minShiftLengthHours: number;
      maxShiftLengthHours: number;
      maxConsecutiveWorkDays: number;
      minHoursNightRest: number;
      maxConsecutiveWeekends: number;
    } & { [key: string]: any };
    /** The response class for optimizations. */
    OptimizationDTO: {
      schedulePeriodId: string;
      agents: string[];
      competencies: string[];
      id?: string;
      created?: string;
      updated?: string;
      status: components["schemas"]["JobStatus"];
    } & { [key: string]: any };
    /** Represents the DTO-model for a planning period. */
    PlanDTO: {
      id?: string;
      name: string;
      official: boolean;
      deleted?: boolean;
    } & { [key: string]: any };
    /** Represents the data model that is used for PATCH-operations. */
    PlanPatchDTO: {
      name?: string;
      official?: boolean;
      deleted?: boolean;
    } & { [key: string]: any };
    /** Restriction set dto for responses. */
    RestrictionSetDTO: {
      name: string;
      description: string;
      default: boolean;
      agreedWeeklyHours: number;
      minHoursWeek: number;
      maxHoursWeek: number;
      agreedDaysPerWeek: number;
      minDaysPerWeek: number;
      maxDaysPerWeek: number;
      minShiftLengthHours: number;
      maxShiftLengthHours: number;
      maxConsecutiveWorkDays: number;
      minHoursNightRest: number;
      maxConsecutiveWeekends: number;
      id: string;
    } & { [key: string]: any };
    /** Restriction set dto for updates. */
    RestrictionSetPatchDTO: {
      name?: string;
      description?: string;
      default?: boolean;
      agreedWeeklyHours?: number;
      minHoursWeek?: number;
      maxHoursWeek?: number;
      agreedDaysPerWeek?: number;
      minDaysPerWeek?: number;
      maxDaysPerWeek?: number;
      minShiftLengthHours?: number;
      maxShiftLengthHours?: number;
      maxConsecutiveWorkDays?: number;
      minHoursNightRest?: number;
      maxConsecutiveWeekends?: number;
    } & { [key: string]: any };
    /**
     * Represents the DTO-model for a schedule copy request.
     *
     * Attributes
     * ----------
     * schedule_period : UUID
     *
     * source_plan : UUID
     *
     * schedules : Union[Synchronize, List[UUID]]
     *   Either a list of the schedules that should be copied or the value
     *   `synchronize`. If `synchronize` is used then a complete synchronization
     *   is being done meaning that all schedules in the target-plan will be
     *   removed before the new schedules are copied.
     */
    ScheduleCopyDTO: {
      schedulePeriod: string;
      sourcePlan: string;
      schedules: (Partial<components["schemas"]["Synchronize"]> &
        Partial<string[]>) & { [key: string]: any };
    } & { [key: string]: any };
    /** Represents the DTO-model for a schedule. */
    ScheduleDTO: {
      id?: string;
      agentId?: string;
      schedulePeriodId: string;
      locked: boolean;
      deleted: boolean;
      shifts: components["schemas"]["ShiftDTO"][];
    } & { [key: string]: any };
    /** DTO-model for schedule updates. */
    SchedulePatchDTO: {
      agentId?: string;
      schedulePeriodId?: string;
      locked?: boolean;
      deleted?: boolean;
      timezone?: string;
      shifts?: components["schemas"]["ShiftDTO"][];
    } & { [key: string]: any };
    /** DTO-model for SchedulePeriod. */
    SchedulePeriodDTO: {
      id?: string;
      name: string;
      startDate: string;
      endDate: string;
    } & { [key: string]: any };
    /** DTO-model for patching a SchedulePeriod. */
    SchedulePeriodPatchDTO: {
      name?: string;
      startDate?: string;
      endDate?: string;
    } & { [key: string]: any };
    /** Query-dto. */
    ScheduleQueryDTO: {
      agentIds?: string[];
      schedulePeriodIds?: string[];
    } & { [key: string]: any };
    /** Represent an activity scheduled within a shift. */
    ScheduledActivityDTO: {
      activityId: string;
      startTime: string;
      endTime: string;
    } & { [key: string]: any };
    /** Represents the DTO-model for a shift. */
    ShiftDTO: {
      id?: string;
      locked: boolean;
      deleted?: boolean;
      activities: components["schemas"]["ScheduledActivityDTO"][];
      startTime?: string;
      endTime?: string;
    } & { [key: string]: any };
    /** DTO-model for shift-updates. */
    ShiftPatchDTO: {
      locked?: boolean;
      activities?: components["schemas"]["ScheduledActivityDTO"][];
    } & { [key: string]: any };
    /** A simulation result. */
    SimulationDTO: {
      schedulePeriodId: string;
      startDateTime: string;
      totalOccupancy?: number[];
      agentsUnderLimit?: components["schemas"]["AgentOccupancyLimit"][];
      agentsAboveLimit?: components["schemas"]["AgentOccupancyLimit"][];
      competencies: components["schemas"]["CompetencyResult"][];
      agents?: components["schemas"]["AgentResult"][];
    } & { [key: string]: any };
    /**
     * A request for a simulation.
     *
     * A simulation request can only include agents or competencies, not both.
     *
     * Attributes
     * ----------
     * schedule_period_id : UUID
     *
     * agents : Optional[List[UUID]]
     *
     * competencies : Optional[List[UUID]]
     *
     * upper_occupancy_limits : List[float] = []
     *     Values can be between 0 and 1 and represent a percentage. If specified
     *     the result will include an array with the number of agents above
     *     the occupancy limit per 15 min period.
     *
     * lower_occupancy_limits : List[float] = []
     *     Values can be between 0 and 1 and represent a percentage. If specified
     *     the result will include an array with the number of agents below
     *     the occupancy limit per 15 min period.
     *
     * include_full_agent_result : bool = False
     *     If specified the occupancies per agent will be added to the result.
     */
    SimulationRequestDTO: {
      schedulePeriodId: string;
      agents?: string[];
      competencies?: string[];
      upperOccupancyLimits?: number[];
      lowerOccupancyLimits?: number[];
      includeFullAgentResult?: boolean;
    } & { [key: string]: any };
    /** Synchronize if schedule should be synchronized. */
    Synchronize: "synchronize";
    ValidationError: {
      loc: string[];
      msg: string;
      type: string;
    } & { [key: string]: any };
  };
}

export interface operations {
  /**
   * Retrieve agents.
   *
   * Returns all agents for the provided tenant.
   */
  get_agents_tenants_tenant_id_agents: {
    parameters: {
      path: {
        tenant_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Retrieve a single agent. */
  get_agent_tenants_tenant_id_agents_agent_id: {
    parameters: {
      path: {
        tenant_id: string;
        agent_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Retrieve an agent's address. */
  get_address_tenants_tenant_id_agents_agent_id_address: {
    parameters: {
      path: {
        tenant_id: string;
        agent_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Add or update an agent's address. */
  put_address_tenants_tenant_id_agents_agent_id_address: {
    parameters: {
      path: {
        tenant_id: string;
        agent_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddressDTO"];
      };
    };
  };
  /** Delete an agent's address. */
  delete_address_tenants_tenant_id_agents_agent_id_address: {
    parameters: {
      path: {
        tenant_id: string;
        agent_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Retrieve an agent's employment. */
  get_employment_tenants_tenant_id_agents_agent_id_employment: {
    parameters: {
      path: {
        tenant_id: string;
        agent_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Add or update an agent's employment. */
  put_employment_tenants_tenant_id_agents_agent_id_employment: {
    parameters: {
      path: {
        tenant_id: string;
        agent_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmploymentDTO"];
      };
    };
  };
  /** Delete an agent's employment. */
  delete_employment_tenants_tenant_id_agents_agent_id_employment: {
    parameters: {
      path: {
        tenant_id: string;
        agent_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Retrieve all availability patterns assigned to an agent. */
  get_all_availabilities_tenants_tenant_id_agents_agent_id_availability: {
    parameters: {
      path: {
        tenant_id: string;
        agent_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Assign an availability pattern to an agent.
   *
   * Adds a new assignment of a availability pattern to an agent. Multiple
   * patterns can be added per agent as long as the date-range
   * when for which it is assigned do not overlap. Treated as a closed interval.
   */
  post_availability_tenants_tenant_id_agents_agent_id_availability: {
    parameters: {
      path: {
        tenant_id: string;
        agent_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AgentAvailabilityPatternDTO"];
      };
    };
  };
  /** Retrieve a specific assignment of an availability pattern to an agent. */
  get_availability_tenants_tenant_id_agents_agent_id_availability_id: {
    parameters: {
      path: {
        tenant_id: string;
        agent_id: string;
        id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Remove an assigned availability pattern for an agent. */
  delete_availability_tenants_tenant_id_agents_agent_id_availability_id: {
    parameters: {
      path: {
        tenant_id: string;
        agent_id: string;
        id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get all restriction sets assigned to an agent. */
  get_assigned_restriction_sets_tenants_tenant_id_agents_agent_id_restrictions: {
    parameters: {
      path: {
        tenant_id: string;
        agent_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AssignedRestrictionSetDTO"][];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Assign a restriction set to an agent.
   *
   * A restriction set can only be added if it does not overlap
   * in time with an existing restriction set.
   */
  post_assigned_restriction_set_tenants_tenant_id_agents_agent_id_restrictions: {
    parameters: {
      path: {
        tenant_id: string;
        agent_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AssignedRestrictionSetDTO"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewAssignedRestrictionSetDTO"];
      };
    };
  };
  /** Retrieve a single assigned restriction set. */
  get_assigned_restriction_set_tenants_tenant_id_agents_agent_id_restrictions_assigned_restriction_set_id: {
    parameters: {
      path: {
        tenant_id: string;
        agent_id: string;
        assigned_restriction_set_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AssignedRestrictionSetDTO"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Remove an assigned restriction set. */
  delete_assigned_restriction_set_tenants_tenant_id_agents_agent_id_restrictions_assigned_restriction_set_id: {
    parameters: {
      path: {
        tenant_id: string;
        agent_id: string;
        assigned_restriction_set_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update a single assigned restriction set. */
  patch_assigned_restriction_set_tenants_tenant_id_agents_agent_id_restrictions_assigned_restriction_set_id: {
    parameters: {
      path: {
        tenant_id: string;
        agent_id: string;
        assigned_restriction_set_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AssignedRestrictionSetDTO"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssignedRestrictionSetPatchDTO"];
      };
    };
  };
  /** Get all competencies associated with an agent. */
  get_competencies_tenants_tenant_id_agents_agent_id_competencies: {
    parameters: {
      path: {
        tenant_id: string;
        agent_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CompetencyDTO"][];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Retrieve all availabilities of one tenant. */
  get_all_tenants_tenant_id_availabilitypatterns: {
    parameters: {
      path: {
        tenant_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Retrieve a single availability. */
  get_tenants_tenant_id_availabilitypatterns_availability_id: {
    parameters: {
      path: {
        tenant_id: string;
        availability_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update an availability pattern. */
  put_tenants_tenant_id_availabilitypatterns_availability_pattern_id: {
    parameters: {
      path: {
        tenant_id: { [key: string]: any };
        availability_pattern_id: { [key: string]: any };
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AvailabilityPatternDTO"];
      };
    };
  };
  /** Delete an availability pattern. */
  delete_tenants_tenant_id_availabilitypatterns_availability_pattern_id: {
    parameters: {
      path: {
        tenant_id: string;
        availability_pattern_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Retrieve a all plans in a tenant. */
  get_all_tenants_tenant_id_plans: {
    parameters: {
      path: {
        tenant_id: string;
      };
      query: {
        includeDeleted?: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PlanDTO"][];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Add a new plan. */
  post_tenants_tenant_id_plans: {
    parameters: {
      path: {
        tenant_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PlanDTO"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlanDTO"];
      };
    };
  };
  /** Retrieve a single plan. */
  get_tenants_tenant_id_plans_plan_id: {
    parameters: {
      path: {
        tenant_id: string;
        plan_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PlanDTO"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete a plan. */
  delete_tenants_tenant_id_plans_plan_id: {
    parameters: {
      path: {
        tenant_id: string;
        plan_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update a plan. */
  patch_tenants_tenant_id_plans_plan_id: {
    parameters: {
      path: {
        tenant_id: string;
        plan_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PlanDTO"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlanPatchDTO"];
      };
    };
  };
  /** Retrieve all activities. */
  get_all_tenants_tenant_id_activities: {
    parameters: {
      path: {
        tenant_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ActivityDTO"][];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create a new activity type. */
  post_tenants_tenant_id_activities: {
    parameters: {
      path: {
        tenant_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ActivityDTO"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ActivityDTO"];
      };
    };
  };
  /** Get a single activity. */
  get_tenants_tenant_id_activities_activity_id: {
    parameters: {
      path: {
        tenant_id: string;
        activity_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ActivityDTO"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update a single activity. */
  patch_tenants_tenant_id_activities_activity_id: {
    parameters: {
      path: {
        tenant_id: string;
        activity_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ActivityDTO"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ActivityPatchDTO"];
      };
    };
  };
  /**
   * Query for schedules.
   *
   * Returns all schedules that covers the period that is provided in the query
   * (if any).
   */
  query_tenants_tenant_id_plans_plan_id_schedules_query: {
    parameters: {
      path: {
        tenant_id: string;
        plan_id: string;
      };
      query: {
        includeDeleted?: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleDTO"][];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScheduleQueryDTO"];
      };
    };
  };
  /**
   * Copy schedules from other plan.
   *
   * Copies the provided schedules from the source plan to this plan (target).
   * Agents that have schedules in the target plan will have those overwritten
   * unless the schedules are marked as locked. Schedules can only be copied
   * from within the same schedule period.
   */
  copy_tenants_tenant_id_plans_plan_id_schedules_copy: {
    parameters: {
      path: {
        tenant_id: string;
        plan_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /**
       * Failure, possible reasons:
       *                   (If a failure occurs, no schedules are copied).
       *
       *                   * There are overlapping shifts with the previous or
       *                   following schedule period in the target plan.
       */
      400: unknown;
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScheduleCopyDTO"];
      };
    };
  };
  /** Retrieve all schedules for a plan. */
  get_all_tenants_tenant_id_plans_plan_id_schedules: {
    parameters: {
      path: {
        tenant_id: string;
        plan_id: string;
      };
      query: {
        includeDeleted?: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleDTO"][];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Add a new set of schedules. */
  post_tenants_tenant_id_plans_plan_id_schedules: {
    parameters: {
      path: {
        tenant_id: string;
        plan_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleDTO"][];
        };
      };
      /**
       * Failure, possible reasons:
       *
       *                     * Missing or invalid `schedulePeriodId`
       *                     * See failures for `POST` shifts
       */
      400: unknown;
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScheduleDTO"][];
      };
    };
  };
  /** Retrieve a single schedule. */
  get_tenants_tenant_id_plans_plan_id_schedules_schedule_id: {
    parameters: {
      path: {
        tenant_id: string;
        plan_id: string;
        schedule_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleDTO"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Soft delete a schedule. */
  delete_tenants_tenant_id_plans_plan_id_schedules_schedule_id: {
    parameters: {
      path: {
        tenant_id: string;
        plan_id: string;
        schedule_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update a single schedule. */
  patch_tenants_tenant_id_plans_plan_id_schedules_schedule_id: {
    parameters: {
      path: {
        tenant_id: string;
        plan_id: string;
        schedule_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleDTO"];
        };
      };
      /** Failure, see `POST`. */
      400: unknown;
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SchedulePatchDTO"];
      };
    };
  };
  /** Retrieve all shifts for a schedule. */
  get_all_tenants_tenant_id_plans_plan_id_schedules_schedule_id_shifts: {
    parameters: {
      path: {
        tenant_id: string;
        plan_id: string;
        schedule_id: string;
      };
      query: {
        includeDeleted?: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ShiftDTO"][];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Add a new set of shifts to a schedule. */
  post_tenants_tenant_id_plans_plan_id_schedules_schedule_id_shifts: {
    parameters: {
      path: {
        tenant_id: string;
        plan_id: string;
        schedule_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ShiftDTO"][];
        };
      };
      /**
       * Failure reasons:
       *
       *                 * activity start time must be before end time
       *                 * activities must follow sequentially
       *                 * shifts must contain at least one activity
       *                 * there must be at least one activity in a shift
       */
      400: unknown;
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ShiftDTO"][];
      };
    };
  };
  /** Retrieve a single shift. */
  get_tenants_tenant_id_plans_plan_id_schedules_schedule_id_shifts_shift_id: {
    parameters: {
      path: {
        tenant_id: string;
        plan_id: string;
        schedule_id: string;
        shift_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ShiftDTO"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Soft delete a shift. */
  delete_tenants_tenant_id_plans_plan_id_schedules_schedule_id_shifts_shift_id: {
    parameters: {
      path: {
        tenant_id: string;
        plan_id: string;
        schedule_id: string;
        shift_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update a single shift. */
  patch_tenants_tenant_id_plans_plan_id_schedules_schedule_id_shifts_shift_id: {
    parameters: {
      path: {
        tenant_id: string;
        plan_id: string;
        schedule_id: string;
        shift_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ShiftDTO"];
        };
      };
      /** See failure reasons for `POST` */
      400: unknown;
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ShiftPatchDTO"];
      };
    };
  };
  /** Retrieve all break settings for a tenant. */
  get_all_tenants_tenant_id_breaksettings: {
    parameters: {
      path: {
        tenant_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BreakSettingsDTO"][];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Add a new break setting to a tenant. */
  post_tenants_tenant_id_breaksettings: {
    parameters: {
      path: {
        tenant_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BreakSettingsDTO"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BreakSettingsDTO"];
      };
    };
  };
  /** Retrieve a single break setting. */
  get_tenants_tenant_id_breaksettings_breaksetting_id: {
    parameters: {
      path: {
        tenant_id: string;
        breaksetting_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BreakSettingsDTO"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete a single break setting. */
  delete_tenants_tenant_id_breaksettings_breaksetting_id: {
    parameters: {
      path: {
        tenant_id: string;
        breaksetting_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update single breaksetting. */
  patch_tenants_tenant_id_breaksettings_breaksetting_id: {
    parameters: {
      path: {
        tenant_id: string;
        breaksetting_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BreakSettingsDTO"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BreakSettingsUpdateDTO"];
      };
    };
  };
  /** Handle healthcheck. */
  get_status_status: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
    };
  };
  /** Retrieve all Restriction sets. */
  get_all_tenants_tenant_id_restrictionsets: {
    parameters: {
      path: {
        tenant_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RestrictionSetDTO"][];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Add a new restriction set. */
  post_tenants_tenant_id_restrictionsets: {
    parameters: {
      path: {
        tenant_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RestrictionSetDTO"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewRestrictionSetDTO"];
      };
    };
  };
  /** Retrieve a single restriction set. */
  get_tenants_tenant_id_restrictionsets_restriction_set_id: {
    parameters: {
      path: {
        tenant_id: string;
        restriction_set_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RestrictionSetDTO"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete a single restriction set. */
  delete_tenants_tenant_id_restrictionsets_restriction_set_id: {
    parameters: {
      path: {
        tenant_id: string;
        restriction_set_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update a single restriction set. */
  patch_tenants_tenant_id_restrictionsets_restriction_set_id: {
    parameters: {
      path: {
        tenant_id: string;
        restriction_set_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RestrictionSetDTO"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RestrictionSetPatchDTO"];
      };
    };
  };
  /** Retrieve all schedule periods. */
  get_all_tenants_tenant_id_scheduleperiods: {
    parameters: {
      path: {
        tenant_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SchedulePeriodDTO"][];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Add a new schedule period. */
  post_tenants_tenant_id_scheduleperiods: {
    parameters: {
      path: {
        tenant_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SchedulePeriodDTO"];
        };
      };
      /**
       * Failure. Possible reasons are:
       *
       *                 * The date-range overlaps with another SchedulePeriod.
       *                 * The name is not unique.
       */
      400: unknown;
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SchedulePeriodDTO"];
      };
    };
  };
  /** Retrieve a single schedule period. */
  get_tenants_tenant_id_scheduleperiods_id: {
    parameters: {
      path: {
        tenant_id: string;
        id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SchedulePeriodDTO"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete a single schedule period. */
  delete_tenants_tenant_id_scheduleperiods_id: {
    parameters: {
      path: {
        tenant_id: string;
        id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /**
       * Possible reasons:
       *
       *                     * There are schedules associated with the schedule period.
       */
      400: unknown;
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update an existing schedule period. */
  patch_tenants_tenant_id_scheduleperiods_id: {
    parameters: {
      path: {
        tenant_id: string;
        id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SchedulePeriodDTO"];
        };
      };
      /** Failure, see `POST` for details. */
      400: unknown;
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SchedulePeriodPatchDTO"];
      };
    };
  };
  /** Get the current optimization. */
  get_optimization_tenants_tenant_id_plans_plan_id_optimization: {
    parameters: {
      path: {
        tenant_id: string;
        plan_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["OptimizationDTO"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Start the current optimization. */
  put_optimization_tenants_tenant_id_plans_plan_id_optimization: {
    parameters: {
      path: {
        tenant_id: string;
        plan_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["OptimizationDTO"];
        };
      };
      /**
       * Failure reasons:
       *
       *                     * Cannot initiate a new optimization while there is one
       *                     running or pending.
       *                     * Cannot optimize the official plan, check the plan id.
       */
      400: unknown;
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewOptimizationDTO"];
      };
    };
  };
  /**
   * Cancel the current optimization.
   *
   * Deleting an optimization will not remove the entity itself or the resulting
   * schedules. The optimization run will continue to run to end but the result
   * will not be used in the schedules.
   */
  delete_optimization_tenants_tenant_id_plans_plan_id_optimization: {
    parameters: {
      path: {
        tenant_id: string;
        plan_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["OptimizationDTO"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Retrieve all competencies for a tenant. */
  get_all_competencies_tenants_tenant_id_competencies: {
    parameters: {
      path: {
        tenant_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CompetencyDTO"][];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Retrieve all agents associated with a competency. */
  get_agents_tenants_tenant_id_competencies_competency_id_agents: {
    parameters: {
      path: {
        tenant_id: string;
        competency_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Route to create a simulation. */
  post_simulation_tenants_tenant_id_plans_plan_id_simulation: {
    parameters: {
      path: {
        tenant_id: string;
        plan_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SimulationDTO"];
        };
      };
      /**
       * Failure reasons:
       *               * Only agents or competencies can be provided, not both.
       */
      400: unknown;
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SimulationRequestDTO"];
      };
    };
  };
  "_get_changelog_changelog.md": {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
    };
  };
}
